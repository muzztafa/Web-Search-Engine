analysis of algorithm | set 4 (solving recurrences) - geeksforgeeks skip to content tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials geek on the top careers internship jobs apply for jobs post a job job-a-thon gsc 2022 courses write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri home saved videos courses gblog puzzles what's new ? change language array matrix strings hashing linked list stack queue binary tree binary search tree heap graph searching sorting divide & conquer mathematical geometric bitwise greedy backtracking branch and bound dynamic programming pattern searching randomized related articles ? related articles algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) table of contents algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) improve article save article like article analysis of algorithm | set 4 (solving recurrences) difficulty level : medium last updated : 14 jun, 2021 in the previous post, we discussed analysis of loops. many algorithms are recursive in nature. when we analyze them, we get a recurrence relation for time complexity. we get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. for example in merge sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. finally we merge the results. time complexity of merge sort can be written as t(n) = 2t(n/2) + cn. there are many other algorithms like binary search, tower of hanoi, etc. there are mainly three ways for solving recurrences. 1) substitution method: we make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. for example consider the recurrence t(n) = 2t(n/2) + n

we guess the solution as t(n) = o(nlogn). now we use induction
to prove our guess.

we need to prove that t(n) <= cnlogn. we can assume that it is true
for values smaller than n.

t(n) = 2t(n/2) + n
    <= 2cn/2log(n/2) + n
    =  cnlogn - cnlog2 + n
    =  cnlogn - cn + n
    <= cnlogn 2) recurrence tree method: in this method, we draw a recurrence tree and calculate the time taken by every level of tree. finally, we sum the work done at all levels. to draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. the pattern is typically a arithmetic or geometric series. for example consider the recurrence relation 
t(n) = t(n/4) + t(n/2) + cn2

           cn2
         /      \
     t(n/4)     t(n/2)

if we further break down the expression t(n/4) and t(n/2), 
we get following recursion tree.

                cn2
           /           \      
       c(n2)/16      c(n2)/4
      /      \          /     \
  t(n/16)     t(n/8)  t(n/8)    t(n/4) 
breaking down further gives us following
                 cn2
            /            \      
       c(n2)/16          c(n2)/4
       /      \            /      \
c(n2)/256   c(n2)/64  c(n2)/64    c(n2)/16
 /    \      /    \    /    \       /    \  

to know the value of t(n), we need to calculate sum of tree 
nodes level by level. if we sum the above tree level by level, 
we get the following series
t(n)  = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + ....
the above series is geometrical progression with ratio 5/16.

to get an upper bound, we can sum the infinite series. 
we get the sum as (n2)/(1 - 5/16) which is o(n2) 3) master method: master method is a direct way to get the solution. the master method works only for following type of recurrences or for recurrences that can be transformed to following type. t(n) = at(n/b) + f(n) where a >= 1 and b > 1 there are following three cases: 1. if f(n) = o(nc) where c < logba then t(n) = ?(nlogba) 2. if f(n) = ?(nc) where c = logba then t(n) = ?(nclog n) 3.if f(n) = ?(nc) where c > logba then t(n) = ?(f(n))  how does this work? master method is mainly derived from recurrence tree method. if we draw recurrence tree of t(n) = at(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is ?(nc) where c is logba. and the height of recurrence tree is logbn in recurrence tree method, we calculate total work done. if the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (case 1). if work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (case 2). if work done at root is asymptotically more, then our result becomes work done at root (case 3). examples of some standard algorithms whose time complexity can be evaluated using master method merge sort: t(n) = 2t(n/2) + ?(n). it falls in case 2 as c is 1 and logba] is also 1. so the solution is ?(n logn) binary search: t(n) = t(n/2) + ?(1). it also falls in case 2 as c is 0 and logba is also 0. so the solution is ?(logn) notes: 1) it is not necessary that a recurrence of the form t(n) = at(n/b) + f(n) can be solved using master theorem. the given three cases have some gaps between them. for example, the recurrence t(n) = 2t(n/2) + n/logn cannot be solved using master method. 2) case 2 can be extended for f(n) = ?(nclogkn) if f(n) = ?(nclogkn) for some constant k >= 0 and c = logba, then t(n) = ?(nclogk+1n) practice problems and solutions on master theorem. next ? analysis of algorithm | set 5 (amortized analysis introduction) references: http://en.wikipedia.org/wiki/master_theorem mit video lecture on asymptotic notation | recurrences | substitution, master method introduction to algorithms 3rd edition by clifford stein, thomas h. cormen, charles e. leiserson, ronald l. rivest please write comments if you find anything incorrect, or you want to share more information about the topic discussed above my personal notes arrow_drop_up save like previous analysis of algorithms | set 4 (analysis of loops) next analysis of algorithm | set 5 (amortized analysis introduction) recommended articles page : analysis of algorithm | set 5 (amortized analysis introduction) 23, sep 14 algorithms | recurrences | set 1 27, dec 18 algorithms sample questions | recurrences | set 2 27, may 19 master theorem for subtract and conquer recurrences 12, jul 17 advanced master theorem for divide and conquer recurrences 17, apr 18 analysis of algorithms | set 1 (asymptotic analysis) 03, jan 12 analysis of algorithms | set 4 (analysis of loops) 11, feb 14 analysis of algorithms | big-o analysis 28, feb 18 what is algorithm and why analysis of it is important? 12, jan 21 algorithms sample questions | set 3 | time order analysis 27, may 19 analysis of algorithms | set 3 (asymptotic notations) 26, oct 13 analysis of algorithms | set 2 (worst, average and best cases) 19, feb 12 analysis of algorithms | set 5 (practice problems) 02, may 17 asymptotic analysis and comparison of sorting algorithms 28, dec 16 analysis of algorithms | little o and little omega notations 14, aug 17 practice questions on time complexity analysis 12, dec 17 analysis of different sorting techniques 29, jan 18 guidelines for asymptotic analysis 27, may 21 complexity analysis of binary search 29, may 19 difference between posteriori and priori analysis 07, aug 19 complexity analysis of various operations of binary min heap 26, jun 20 analysis of algorithms | big - ? (big theta) notation 11, jul 21 analysis of algorithms | big - ? (big- omega) notation 11, jul 21 prune-and-search | a complexity analysis overview 19, jul 21 article contributed by : geeksforgeeks vote for difficulty current difficulty : medium easy normal medium hard expert improved by : manish dhanuka animagussirius7 pragatpandya article tags : analysis report issue writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here. load comments comments old comments what's new geeks summer carnival 2022 view details data structures & algorithms- self paced course view details complete interview preparation view details most popular in analysis time complexity and space complexity practice questions on time complexity analysis understanding time complexity with simple examples complexity of different operations in binary tree, binary search tree and avl tree time complexity of building a heap more related articles in analysis analysis of algorithms | big-o analysis difference between big oh, big omega and big theta analysis of different sorting techniques cyclomatic complexity complexity analysis of binary search ? 5th floor, a-118, sector-136, noida, uttar pradesh - 201305 feedback@geeksforgeeks.org company about us careers in media contact us privacy policy copyright policy learn algorithms data structures sde cheat sheet machine learning cs subjects video tutorials news top news technology work & career business finance lifestyle languages python java cpp golang c# sql web development web tutorials django tutorial html css javascript bootstrap contribute write an article improve an article pick topics to write write interview experience internships video internship @geeksforgeeks , some rights reserved we use cookies to ensure you have the best browsing experience on our website. by using our site, you acknowledge that you have read and understood our cookie policy & privacy policy got it ! start your coding journey now! login register