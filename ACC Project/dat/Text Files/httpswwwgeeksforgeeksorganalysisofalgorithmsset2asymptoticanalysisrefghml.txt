analysis of algorithms | set 2 (worst, average and best cases) - geeksforgeeks skip to content tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials geek on the top careers internship jobs apply for jobs post a job job-a-thon gsc 2022 courses write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri home saved videos courses gblog puzzles what's new ? change language array matrix strings hashing linked list stack queue binary tree binary search tree heap graph searching sorting divide & conquer mathematical geometric bitwise greedy backtracking branch and bound dynamic programming pattern searching randomized related articles ? related articles algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) table of contents algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) improve article save article like article analysis of algorithms | set 2 (worst, average and best cases) difficulty level : easy last updated : 26 jan, 2022 in the previous post, we discussed how asymptotic analysis overcomes the problems of the naive way of analyzing algorithms. in this post, we will take an example of linear search and analyze it using asymptotic analysis. we can have three cases to analyze an algorithm: 1) the worst case 2) average case 3) best case let us consider the following implementation of linear search. c++ // c++ implementation of the approach #include <bits/stdc++.h> using namespace std; // linearly search x in arr[]. // if x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } // driver code int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // this code is contributed // by akanksha rai c // c implementation of the approach #include <stdio.h> // linearly search x in arr[]. // if x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } /* driver program to test above functions*/ int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } java // java implementation of the approach public class gfg { // linearly search x in arr[]. if x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* driver program to test above functions*/ public static void main(string[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; system.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*this code is contributed by princiraj1992*/ python3 # python 3 implementation of the approach # linearly search x in arr[]. if x is present # then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # driver code arr = [1, 10, 30, 15] x = 30 print(x, "is present at index", search(arr, x)) # this code is contributed # by princiraj1992 c# // c# implementation of the approach using system; public class gfg { // linearly search x in arr[]. if x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* driver program to test above functions*/ public static void main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; console.writeline(x + " is present at index " + search(arr, n, x)); } } /*this code is contributed by princiraj1992*/ php <?php // php implementation of the approach // linearly search x in arr[]. if x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // driver code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // this code is contributed // by akanksha rai javascript <script> // javascript implementation of the approach // linearly search x in arr. if x is present then // return the index, otherwise return -1 function search(arr , n , x) { var i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* driver program to test above functions */ var arr = [ 1, 10, 30, 15 ]; var x = 30; var n = arr.length; document.write(x+" is present at index "+ search(arr, n, x)); // this code is contributed by gauravrajput1 </script> output: 30 is present at index 2 worst case analysis (usually done) in the worst-case analysis, we calculate the upper bound on the running time of an algorithm. we must know the case that causes a maximum number of operations to be executed. for linear search, the worst case happens when the element to be searched (x in the above code) is not present in the array. when x is not present, the search() function compares it with all the elements of arr[] one by one. therefore, the worst-case time complexity of linear search would be ?(n). average case analysis (sometimes done) in average case analysis, we take all possible inputs and calculate computing time for all of the inputs. sum all the calculated values and divide the sum by the total number of inputs. we must know (or predict) the distribution of cases. for the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in the array). so we sum all the cases and divide the sum by (n+1). following is the value of average-case time complexity. average case time =  = = ?(n) best case analysis (bogus) in the best case analysis, we calculate the lower bound on the running time of an algorithm. we must know the case that causes a minimum number of operations to be executed. in the linear search problem, the best case occurs when x is present at the first location. the number of operations in the best case is constant (not dependent on n). so time complexity in the best case would be ?(1) most of the times, we do worst-case analysis to analyze algorithms. in the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. the average case analysis is not easy to do in most practical cases and it is rarely done. in the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. the best case analysis is bogus. guaranteeing a lower bound on an algorithm doesn?t provide any information as in the worst case, an algorithm may take years to run. for some algorithms, all the cases are asymptotically the same, i.e., there are no worst and best cases. for example, merge sort. merge sort does ?(nlogn) operations in all cases. most of the other sorting algorithms have worst and best cases. for example, in the typical implementation of quick sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occurs when the pivot elements always divide the array into two halves. for insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. https://youtu.be/rlzpz8es_6k next ? analysis of algorithms | set 3 (asymptotic notations) references: mit?s video lecture 1 on introduction to algorithms. please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. my personal notes arrow_drop_up save like previous analysis of algorithms | set 1 (asymptotic analysis) next analysis of algorithms | set 3 (asymptotic notations) recommended articles page : analysis of algorithms | set 1 (asymptotic analysis) 03, jan 12 analysis of algorithms | set 4 (analysis of loops) 11, feb 14 analysis of algorithms | big-o analysis 28, feb 18 analysis of algorithm | set 5 (amortized analysis introduction) 23, sep 14 use cases of mouse programming in c/c++ | set 2 29, dec 20 don?t forget the edge cases ! 25, jan 18 use cases of mouse programming in c/c++ 29, dec 20 algorithms sample questions | set 3 | time order analysis 27, may 19 analysis of algorithms | set 3 (asymptotic notations) 26, oct 13 analysis of algorithms | set 5 (practice problems) 02, may 17 asymptotic analysis and comparison of sorting algorithms 28, dec 16 analysis of algorithms | little o and little omega notations 14, aug 17 analysis of algorithms | big - ? (big theta) notation 11, jul 21 analysis of algorithms | big - ? (big- omega) notation 11, jul 21 analysis of algorithm | set 4 (solving recurrences) 13, feb 14 difference between posteriori and priori analysis 07, aug 19 what is algorithm and why analysis of it is important? 12, jan 21 prune-and-search | a complexity analysis overview 19, jul 21 find array elements that are greater than average 15, apr 18 average of cubes of first n natural numbers 16, jun 20 practice questions on time complexity analysis 12, dec 17 analysis of different sorting techniques 29, jan 18 guidelines for asymptotic analysis 27, may 21 complexity analysis of binary search 29, may 19 article contributed by : geeksforgeeks vote for difficulty current difficulty : easy easy normal medium hard expert improved by : princiraj1992 akanksha_rai ankurchattopadhyay gaurishankarbadola urvishmahajan gauravrajput1 tanvibugdani article tags : analysis articles report issue writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here. load comments comments old comments what's new geeks summer carnival 2022 view details data structures & algorithms- self paced course view details complete interview preparation view details most popular in analysis time complexity and space complexity practice questions on time complexity analysis understanding time complexity with simple examples complexity of different operations in binary tree, binary search tree and avl tree time complexity of building a heap most visited in articles tree traversals (inorder, preorder and postorder) sql | join (inner, left, right and full joins) find command in linux with examples understanding "extern" keyword in c mutex vs semaphore ? 5th floor, a-118, sector-136, noida, uttar pradesh - 201305 feedback@geeksforgeeks.org company about us careers in media contact us privacy policy copyright policy learn algorithms data structures sde cheat sheet machine learning cs subjects video tutorials news top news technology work & career business finance lifestyle languages python java cpp golang c# sql web development web tutorials django tutorial html css javascript bootstrap contribute write an article improve an article pick topics to write write interview experience internships video internship @geeksforgeeks , some rights reserved we use cookies to ensure you have the best browsing experience on our website. by using our site, you acknowledge that you have read and understood our cookie policy & privacy policy got it ! start your coding journey now! login register