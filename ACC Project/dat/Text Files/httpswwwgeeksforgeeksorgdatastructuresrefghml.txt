data structures - geeksforgeeks skip to content tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials geek on the top careers internship jobs apply for jobs post a job job-a-thon gsc 2022 courses write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri home saved videos courses gblog puzzles what's new ? change language data structures algorithms interview preparation topic-wise practice c++ java python competitive programming machine learning web development sde sheet puzzles gfg school projects related articles ? table of contents data structures array introduction to arrays arrays in c/c++ arrays in java program for array rotation reversal algorithm for array rotation block swap algorithm for array rotation rearrange an array such that arr[i] = i write a program to reverse an array or string rearrange array such that arr[i] >= arr[j] if i is even and arr[i]<=arr[j] if i is odd and j < i linked list linked list | set 1 (introduction) linked list vs array linked list | set 2 (inserting a node) linked list | set 3 (deleting a node) delete a linked list node at a given position circular linked list | set 1 (introduction and applications) circular linked list | set 2 (traversal) split a circular linked list into two halves sorted insert for circular linked list stack stack data structure (introduction and program) stack in c++ stl stack class in java stack in python c# stack with examples queue using stacks design and implement special stack data structure | added space optimized version implement two stacks in an array implement stack using queues queue queue | set 1 (introduction and array implementation) applications of queue data structure priority queue | set 1 (introduction) applications of priority queue deque | set 1 (introduction and applications) lru cache implementation queue ? linked list implementation binary tree binary tree | set 1 (introduction) binary tree | set 2 (properties) binary tree | set 3 (types of binary tree) tree traversals (inorder, preorder and postorder) inorder tree traversal without recursion inorder tree traversal without recursion and without stack! construct tree from given inorder and preorder traversals construct a tree from inorder and level order traversals | set 1 construct complete binary tree from its linked list representation binary search tree binary search tree | set 1 (search and insertion) binary search tree | set 2 (delete) advantages of bst over hash table construct bst from given preorder traversal | set 1 construct bst from given preorder traversal | set 2 binary tree to binary search tree conversion sorted linked list to balanced bst sorted array to balanced bst find the node with minimum value in a binary search tree heap binary heap time complexity of building a heap applications of heap data structure binomial heap fibonacci heap | set 1 (introduction) leftist tree / leftist heap k-ary heap heapsort iterative heapsort hashing hashing | set 1 (introduction) index mapping (or trivial hashing) with negatives allowed hashing | set 2 (separate chaining) hashing | set 3 (open addressing) double hashing print a binary tree in vertical order | set 2 (map based method) find whether an array is subset of another array | added method 5 union and intersection of two linked lists | set-3 (hashing) given an array a[] and a number x, check for pair in a[] with sum as x (aka two sum) graph graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph detect cycle in a directed graph detect cycle in an undirected graph detect cycle in a directed graph using colors topological sorting all topological sorts of a directed acyclic graph kahn?s algorithm for topological sorting matrix rotate matrix elements inplace rotate square matrix by 90 degrees | set 1 rotate a matrix by 90 degree without using any extra space | set 2 rotate a matrix by 180 degree rotate each ring of matrix anticlockwise by k elements turn an image by 90 degree check if all rows of a matrix are circular rotations of each other sort the given matrix find the row with maximum number of 1s find median in row wise sorted matrix advanced data structure memory efficient doubly linked list xor linked list ? a memory efficient doubly linked list | set 1 xor linked list ? a memory efficient doubly linked list | set 2 memory efficient doubly linked list xor linked list ? a memory efficient doubly linked list | set 1 xor linked list ? a memory efficient doubly linked list | set 2 table of contents data structures array introduction to arrays arrays in c/c++ arrays in java program for array rotation reversal algorithm for array rotation block swap algorithm for array rotation rearrange an array such that arr[i] = i write a program to reverse an array or string rearrange array such that arr[i] >= arr[j] if i is even and arr[i]<=arr[j] if i is odd and j < i linked list linked list | set 1 (introduction) linked list vs array linked list | set 2 (inserting a node) linked list | set 3 (deleting a node) delete a linked list node at a given position circular linked list | set 1 (introduction and applications) circular linked list | set 2 (traversal) split a circular linked list into two halves sorted insert for circular linked list stack stack data structure (introduction and program) stack in c++ stl stack class in java stack in python c# stack with examples queue using stacks design and implement special stack data structure | added space optimized version implement two stacks in an array implement stack using queues queue queue | set 1 (introduction and array implementation) applications of queue data structure priority queue | set 1 (introduction) applications of priority queue deque | set 1 (introduction and applications) lru cache implementation queue ? linked list implementation binary tree binary tree | set 1 (introduction) binary tree | set 2 (properties) binary tree | set 3 (types of binary tree) tree traversals (inorder, preorder and postorder) inorder tree traversal without recursion inorder tree traversal without recursion and without stack! construct tree from given inorder and preorder traversals construct a tree from inorder and level order traversals | set 1 construct complete binary tree from its linked list representation binary search tree binary search tree | set 1 (search and insertion) binary search tree | set 2 (delete) advantages of bst over hash table construct bst from given preorder traversal | set 1 construct bst from given preorder traversal | set 2 binary tree to binary search tree conversion sorted linked list to balanced bst sorted array to balanced bst find the node with minimum value in a binary search tree heap binary heap time complexity of building a heap applications of heap data structure binomial heap fibonacci heap | set 1 (introduction) leftist tree / leftist heap k-ary heap heapsort iterative heapsort hashing hashing | set 1 (introduction) index mapping (or trivial hashing) with negatives allowed hashing | set 2 (separate chaining) hashing | set 3 (open addressing) double hashing print a binary tree in vertical order | set 2 (map based method) find whether an array is subset of another array | added method 5 union and intersection of two linked lists | set-3 (hashing) given an array a[] and a number x, check for pair in a[] with sum as x (aka two sum) graph graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph detect cycle in a directed graph detect cycle in an undirected graph detect cycle in a directed graph using colors topological sorting all topological sorts of a directed acyclic graph kahn?s algorithm for topological sorting matrix rotate matrix elements inplace rotate square matrix by 90 degrees | set 1 rotate a matrix by 90 degree without using any extra space | set 2 rotate a matrix by 180 degree rotate each ring of matrix anticlockwise by k elements turn an image by 90 degree check if all rows of a matrix are circular rotations of each other sort the given matrix find the row with maximum number of 1s find median in row wise sorted matrix advanced data structure memory efficient doubly linked list xor linked list ? a memory efficient doubly linked list | set 1 xor linked list ? a memory efficient doubly linked list | set 2 memory efficient doubly linked list xor linked list ? a memory efficient doubly linked list | set 1 xor linked list ? a memory efficient doubly linked list | set 2 data structures last updated : 05 apr, 2022 a data structure is a particular way of organizing data in a computer so that it can be used effectively. for example, we can store a list of items having the same data-type using the array data structure. array data structure this page contains detailed tutorials on different data structures (ds) with topic-wise problems. topics: array linked list stack queue binary tree binary search tree heap hashing graph matrix misc advanced data structure overview: overview of data structures | set 1 (linear data structures) overview of data structures | set 2 (binary tree, bst, heap and hash) overview of data structures | set 3 (graph, trie, segment tree and suffix tree) abstract data types linked list: singly linked list: introduction to linked list linked list vs array linked list insertion linked list deletion (deleting a given key) linked list deletion (deleting a key at given position) a programmer?s approach of looking at array vs. linked list find length of a linked list (iterative and recursive) how to write c functions that modify head pointer of a linked list? swap nodes in a linked list without swapping data reverse a linked list merge two sorted linked lists merge sort for linked lists reverse a linked list in groups of given size detect and remove loop in a linked list add two numbers represented by linked lists | set 1 rotate a linked list generic linked list in c circular linked list: circular linked list introduction and applications, circular singly linked list insertion< circular linked list traversal split a circular linked list into two halves sorted insert for circular linked list doubly linked list: doubly linked list introduction and insertion delete a node in a doubly linked list reverse a doubly linked list the great tree-list recursion problem. quicksort on doubly linked list merge sort for doubly linked list all articles of linked list quiz on linked list coding practice on linked list recent articles on linked list stack: introduction to stack infix to postfix conversion using stack evaluation of postfix expression reverse a string using stack implement two stacks in an array check for balanced parentheses in an expression next greater element reverse a stack using recursion sort a stack using recursion the stock span problem design and implement special stack data structure implement stack using queues design a stack with operations on middle element how to efficiently implement k stacks in a single array? sort a stack using recursion quiz on stack all articles on stack coding practice on stack recent articles on stack queue: queue introduction and array implementation linked list implementation of queue applications of queue data structure priority queue introduction deque (introduction and applications) implementation of deque using circular array implement queue using stacks find the first circular tour that visits all petrol pumps maximum of all subarrays of size k an interesting method to generate binary numbers from 1 to n how to efficiently implement k queues in a single array? quiz on queue all articles on queue coding practice on queue recent articles on queue binary tree: binary tree introduction binary tree properties types of binary tree handshaking lemma and interesting tree properties enumeration of binary tree applications of tree data structure tree traversals bfs vs dfs for binary tree level order tree traversal diameter of a binary tree inorder tree traversal without recursion inorder tree traversal without recursion and without stack! threaded binary tree maximum depth or height of a tree if you are given two traversal sequences, can you construct the binary tree? clone a binary tree with random pointers construct tree from given inorder and preorder traversals maximum width of a binary tree print nodes at k distance from root print ancestors of a given node in binary tree check if a binary tree is subtree of another binary tree connect nodes at same level quiz on binary tree quiz on binary tree traversals all articles on binary tree coding practice on binary tree recent articles on tree binary search tree: search and insert in bst deletion from bst minimum value in a binary search tree inorder predecessor and successor for a given key in bst check if a binary tree is bst or not lowest common ancestor in a binary search tree. inorder successor in binary search tree find k-th smallest element in bst (order statistics in bst) merge two bsts with limited extra space two nodes of a bst are swapped, correct the bst floor and ceil from a bst in-place conversion of sorted dll to balanced bst find a pair with given sum in a balanced bst total number of possible binary search trees with n keys merge two balanced binary search trees binary tree to binary search tree conversion quiz on binary search trees quiz on balanced binary search trees all articles on binary search tree coding practice on binary search tree recent articles on bst heap: binary heap why is binary heap preferred over bst for priority queue? binomial heap fibonacci heap heap sort k?th largest element in an array sort an almost sorted array/ tournament tree (winner tree) and binary heap all articles on heap quiz on heap coding practice on heap recent articles on heap hashing: hashing introduction separate chaining for collision handling open addressing for collision handling print a binary tree in vertical order find whether an array is subset of another array union and intersection of two linked lists find a pair with given sum check if a given array contains duplicate elements within k distance from each other find itinerary from a given list of tickets find number of employees under every employee quiz on hashing all articles on hashing coding practice on hashing recent articles on hashing graph: introduction, dfs and bfs: graph and its representations breadth first traversal for a graph depth first traversal for a graph applications of depth first search applications of breadth first traversal detect cycle in a directed graph detect cycle in a an undirected graph detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not snake and ladder problem minimize cash flow among a given set of friends who have borrowed money from each other boggle (find all possible words in a board of characters) assign directions to edges so that the directed graph remains acyclic all articles on graph data structure quiz on graph quiz on graph traversals quiz on graph shortest paths quiz on graph minimum spanning tree coding practice on graph recent articles on graph advanced data structure: advanced lists: memory efficient doubly linked list xor linked list ? a memory efficient doubly linked list | set 1 xor linked list ? a memory efficient doubly linked list | set 2 skip list | set 1 (introduction) self organizing list | set 1 (introduction) unrolled linked list | set 1 (introduction) segment tree: segment tree | set 1 (sum of given range) segment tree | set 2 (range minimum query) lazy propagation in segment tree persistent segment tree | set 1 (introduction) all articles on segment tree trie: trie | (insert and search) trie | (delete) longest prefix matching ? a trie based solution in java print unique rows in a given boolean matrix how to implement reverse dns look up cache? how to implement forward dns look up cache? all articles on trie binary indexed tree: binary indexed tree two dimensional binary indexed tree or fenwick tree binary indexed tree : range updates and point queries binary indexed tree : range update and range queries all articles on binary indexed tree suffix array and suffix tree: suffix array introduction suffix array nlogn algorithm kasai?s algorithm for construction of lcp array from suffix array suffix tree introduction ukkonen?s suffix tree construction ? part 1 ukkonen?s suffix tree construction ? part 2 ukkonen?s suffix tree construction ? part 3 ukkonen?s suffix tree construction ? part 4, ukkonen?s suffix tree construction ? part 5 ukkonen?s suffix tree construction ? part 6 generalized suffix tree build linear time suffix array using suffix tree substring check searching all patterns longest repeated substring, longest common substring, longest palindromic substring all articles on suffix tree avl tree: avl tree | set 1 (insertion) avl tree | set 2 (deletion) avl with duplicate keys splay tree: splay tree | set 1 (search) splay tree | set 2 (insert) b tree: b-tree | set 1 (introduction) b-tree | set 2 (insert) b-tree | set 3 (delete) red-black tree: red-black tree introduction red black tree insertion. red-black tree deletion program for red black tree insertion all articles on self-balancing bsts k dimensional tree: kd tree (search and insert) k d tree (find minimum) k d tree (delete) others: treap (a randomized binary search tree) ternary search tree interval tree implement lru cache sort numbers stored on different machines find the k most frequent words from a file given a sequence of words, print all anagrams together tournament tree (winner tree) and binary heap decision trees ? fake (counterfeit) coin puzzle (12 coin puzzle) spaghetti stack data structure for dictionary and spell checker? cartesian tree cartesian tree sorting sparse set centroid decomposition of tree gomory-hu tree recent articles on advanced data structures. array: search, insert and delete in an unsorted array search, insert and delete in a sorted array write a program to reverse an array leaders in an array given an array a[] and a number x, check for pair in a[] with sum as x majority element find the number occurring odd number of times largest sum contiguous subarray find the missing number search an element in a sorted and pivoted array merge an array of size n into another array of size m+n median of two sorted arrays program for array rotation reversal algorithm for array rotation block swap algorithm for array rotation maximum sum such that no two elements are adjacent sort elements by frequency | set 1 count inversions in an array all articles on array coding practice on array quiz on array coding practice on array recent articles on array matrix: search in a row wise and column wise sorted matrix print a given matrix in spiral form a boolean matrix question print unique rows in a given boolean matrix maximum size square sub-matrix with all 1s print unique rows in a given boolean matrix inplace m x n size matrix transpose | updated dynamic programming | set 27 (maximum sum rectangle in a 2d matrix) strassen?s matrix multiplication create a matrix with alternating rectangles of o and x print all elements in sorted order from row and column wise sorted matrix given an n x n square matrix, find sum of all sub-squares of size k x k count number of islands where every island is row-wise and column-wise separated find a common element in all rows of a given row-wise sorted matrix all articles on matrix coding practice on matrix recent articles on matrix. misc: commonly asked data structure interview questions | set 1 a data structure for n elements and o(1) operations expression tree geeksforgeeks courses complete interview preparation an enriching course designed by the experts to help you crack the coding interview of top product or service-based organizations. get 200+ algorithmic coding problems, premium lecture videos, subject-wise theoretical content, lifetime access, and much more. here you?ll get prepared for each and every subject & skill relevant to the interview whether it be core cs subjects, programming language, reasoning & aptitude, resume building, etc. live courses get best-in-industry real-time gfg live courses to upskill yourself and get into your dream company. you can attend these live classes from any geographical location and here you can ask your doubts to the instructor just like an offline classroom program. do check out these worthwhile live courses by geeksforgeeks ? dsa live for working professionals, system design live, competitive programming live, and more! language foundation courses[c++ / java / python ] learn any programming language from scratch and understand all its fundamental concepts for a strong programming foundation in the easiest possible manner with help of geeksforgeeks language foundation courses ? java foundation | python foundation | c++ foundation. these courses have been designed for absolute beginners who wish to kickstart and build their foundations of programming. my personal notes arrow_drop_up save writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here. load comments comments old comments what's new geeks summer carnival 2022 view details data structures & algorithms- self paced course view details complete interview preparation view details most popular articles best time to buy and sell stock must do coding questions for product based companies axios in react: a guide for beginners implementation of bit stuffing and bit destuffing stratified sampling in pandas most visited articles python opencv - waitkey() function ways to find out list of all open ports in linux create a telegram bot using python how to get current route in next.js ? sql query to get column names from a table ? 5th floor, a-118, sector-136, noida, uttar pradesh - 201305 feedback@geeksforgeeks.org company about us careers in media contact us privacy policy copyright policy learn algorithms data structures sde cheat sheet machine learning cs subjects video tutorials news top news technology work & career business finance lifestyle languages python java cpp golang c# sql web development web tutorials django tutorial html css javascript bootstrap contribute write an article improve an article pick topics to write write interview experience internships video internship @geeksforgeeks , some rights reserved we use cookies to ensure you have the best browsing experience on our website. by using our site, you acknowledge that you have read and understood our cookie policy & privacy policy got it ! start your coding journey now! login register