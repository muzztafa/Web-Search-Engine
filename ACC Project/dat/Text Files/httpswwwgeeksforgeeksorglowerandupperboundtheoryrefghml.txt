lower and upper bound theory - geeksforgeeks skip to content tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials geek on the top careers internship jobs apply for jobs post a job job-a-thon gsc 2022 courses write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri home saved videos courses gblog puzzles what's new ? change language array matrix strings hashing linked list stack queue binary tree binary search tree heap graph searching sorting divide & conquer mathematical geometric bitwise greedy backtracking branch and bound dynamic programming pattern searching randomized related articles ? related articles algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) table of contents algorithms algorithms introduction to algorithms difference between algorithm, pseudocode and program difference between algorithm and flowchart analysis of algorithms analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | little o and little omega notations lower and upper bound theory analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 4 (solving recurrences) analysis of algorithm | set 5 (amortized analysis introduction) what does ?space complexity? mean? pseudo-polynomial algorithms searching and sorting interpolation search vs binary search stability in sorting algorithms when does the worst case of quicksort occur? lower bound for comparison based sorting algorithms which sorting algorithm makes minimum number of memory writes? find the minimum length unsorted subarray, sorting which makes the complete array sorted merge sort for linked lists sort a nearly sorted (or k sorted) array iterative quick sort greedy algorithms activity selection problem | greedy algo-1 kruskal?s minimum spanning tree algorithm | greedy algo-2 huffman coding | greedy algo-3 efficient huffman coding for sorted input | greedy algo-4 prim?s minimum spanning tree (mst) | greedy algo-5 prim?s mst for adjacency list representation | greedy algo-6 dijkstra?s shortest path algorithm | greedy algo-7 dijkstra?s algorithm for adjacency list representation | greedy algo-8 job sequencing problem dynamic programming overlapping subproblems property in dynamic programming | dp-1 optimal substructure property in dynamic programming | dp-2 longest increasing subsequence | dp-3 longest common subsequence | dp-4 edit distance | dp-5 min cost path | dp-6 coin change | dp-7 matrix chain multiplication | dp-8 binomial coefficient | dp-9 0-1 knapsack problem | dp-10 dynamic programming pattern searching naive algorithm for pattern searching kmp algorithm for pattern searching rabin-karp algorithm for pattern searching optimized naive algorithm for pattern searching finite automata algorithm for pattern searching pattern searching | set 6 (efficient construction of finite automata) boyer moore algorithm for pattern searching suffix array | set 1 (introduction) anagram substring search (or search for all permutations) pattern searching using a trie of all suffixes pattern searching other string algorithms manacher?s algorithm ? linear time longest palindromic substring ? part 1 manacher?s algorithm ? linear time longest palindromic substring ? part 2 manacher?s algorithm ? linear time longest palindromic substring ? part 3 manacher?s algorithm ? linear time longest palindromic substring ? part 4 longest even length substring such that sum of first and second half is same print all possible strings that can be made by placing spaces backtracking write a program to print all permutations of a given string the knight?s tour problem | backtracking-1 rat in a maze | backtracking-2 n queen problem | backtracking-3 subset sum | backtracking-4 m coloring problem | backtracking-5 hamiltonian cycle | backtracking-6 sudoku | backtracking-7 tug of war solving cryptarithmetic puzzles | backtracking-8 divide and conquer divide and conquer algorithm | introduction write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) closest pair of points using divide and conquer algorithm divide and conquer | set 5 (strassen?s matrix multiplication) quick sort vs merge sort divide and conquer geometric algorithms closest pair of points | o(nlogn) implementation how to check if two given line segments intersect? how to check if a given point lies inside or outside a polygon? convex hull | set 1 (jarvis?s algorithm or wrapping) convex hull | set 2 (graham scan) given n line segments, find if any two segments intersect check whether a given point lies inside a triangle or not how to check if given four points form a square mathematical algorithms write an efficient method to check if a number is multiple of 3 efficient way to multiply with 7 lucky numbers write a program to add two numbers in base 14 babylonian method for square root multiply two integers without using multiplication, division and bitwise operators, and no loops print all combinations of points that can compose a given number write you own power without using multiplication(*) and division(/) operators program for fibonacci numbers bit algorithms find the element that appears once detect if two integers have opposite signs count total set bits in all numbers from 1 to n swap bits in a given number add two numbers without using arithmetic operators smallest of three integers without comparison operators a boolean array puzzle program to count number of set bits in an (big) array next higher number with same number of set bits optimization techniques | set 1 (modulus) graph algorithms graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph longest path in a directed acyclic graph topological sorting check whether a given graph is bipartite or not randomized algorithms linearity of expectation expected number of trials until success randomized algorithms | set 0 (mathematical background) randomized algorithms | set 1 (introduction and analysis) randomized algorithms | set 2 (classification and applications) randomized algorithms | set 3 (1/2 approximate median) karger?s algorithm for minimum cut | set 1 (introduction and implementation) k?th smallest/largest element in unsorted array | set 2 (expected linear time) reservoir sampling shuffle a given array using fisher?yates shuffle algorithm branch and bound 0/1 knapsack using branch and bound implementation of 0/1 knapsack using branch and bound 8 puzzle problem using branch and bound job assignment problem using branch and bound n queen problem using branch and bound traveling salesman problem using branch and bound quizzes on algorithms analysis of algorithms sorting divide and conquer dynamic programming backtracking algorithm misc np complete searching analysis of algorithms (recurrences) improve article save article like article lower and upper bound theory difficulty level : easy last updated : 28 nov, 2021 the lower and upper bound theory provides a way to find the lowest complexity algorithm to solve a problem. before understanding the theory, first, let?s have a brief look at what actually lower and upper bounds are. lower bound ? let l(n) be the running time of an algorithm a(say), then g(n) is the lower bound of a if there exist two constants c and n such that l(n) >= c*g(n) for n > n. lower bound of an algorithm is shown by the asymptotic notation called big omega (or just omega). upper bound ? let u(n) be the running time of an algorithm a(say), then g(n) is the upper bound of a if there exist two constants c and n such that u(n) <= c*g(n) for n > n. upper bound of an algorithm is shown by the asymptotic notation called big oh(o) (or just oh). 1. lower bound theory: according to the lower bound theory, for a lower bound l(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than l(n) for random input. also, every algorithm must take at least l(n) time in the worst case. note that l(n) here is the minimum of all the possible algorithms, of maximum complexity. the lower bound is very important for any algorithm. once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order is the same then we can declare our algorithm as optimal. so in this section, we will be discussing techniques for finding the lower bound of an algorithm. note that our main motive is to get an optimal algorithm, which is the one having it?s upper bound same as its lower bound (u(n)=l(n)). merge sort is a common example of an optimal algorithm. trivial lower bound ? it is the easiest method to find the lower bound. the lower bounds which can be easily observed on the basis of the number of input taken and the number of output produced are called trivial lower bound. example: multiplication of n x n matrix, where, input: for 2 matrix we will have 2n2 inputs
output: 1 matrix of order n x n, i.e.,  n2 outputs in the above example it?s easily predictable that the lower bound is o(n2). computational model ? the method is for all those algorithms that are comparison-based. for example, in sorting, we have to compare the elements of the list among themselves and then sort them accordingly. similar is the case with searching and thus we can implement the same in this case. now we will look at some examples to understand its usage. ordered searching ? it is a type of searching in which the list is already sorted. example-1: linear search explanation ? in linear search, we compare the key with the first element if it does not match we compare it with the second element and so on till we check against the nth element. else we will end up with a failure. example-2: binary search explanation ? in binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. the diagram below there is an illustration of binary search in an array consisting of 4 elements calculating the lower bound: the max no of comparisons are n. let there be k levels in the tree. no. of nodes will be 2k-1 the upper bound of no of nodes in any comparison-based search of an element in the list of size n will be n as there are a maximum of n comparisons in worst case scenario 2k-1 each level will take 1 comparison thus no. of comparisons k?|log2n| thus the lower bound of any comparison-based search from a list of n elements cannot be less than log(n). therefore we can say that binary search is optimal as its complexity is ?(log n). sorting ? the diagram below is an example of a tree formed in sorting combinations with 3 elements. example ? for n elements, finding lower bound using computation model. explanation ? for n elements, we have a total of n! combinations (leaf nodes). (refer to the diagram the total combinations are 3! or 6) also, it is clear that the tree formed is a binary tree. each level in the diagram indicates a comparison. let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!?2k. as the k in the above example is the no of comparisons thus by computational model lower bound = k. now we can say that,
n!?2t(n)
thus, 
t(n)>|log n!| 
=> n!<=nn
thus,
log n!<=log nn
taking ceiling function on both sides, we get
|-log nn-|>=|-log n!-|
thus complexity becomes ?(lognn) or ?(nlogn) using lower bond theory to solve the algebraic problem: straight line program ? the type of program built without any loops or control structures is called the straight line program. for example, c //summing to nos sum(a, b) { //no loops and no control structures c:= a+b; return c; } algebraic problem ? problems related to algebra like solving equations inequalities etc. come under algebraic problems. for example, solving equation ax2+bx+c with simple programming. c algo_sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } the complexity for solving here is 4 (excluding the returning). the above example shows us a simple way to solve an equation for 2-degree polynomial i.e., 4 thus for nth degree polynomial we will have a complexity of o(n2). let us demonstrate via an algorithm. example: x+a0 is a polynomial of degree n. c pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(a, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + a[i]*pow(x, i); return v; } loop within a loop => complexity = o(n2); now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). as per lower bound theory, the optimal algorithm to solve the above problem is the one having complexity o(n). let?s prove this theorem using lower bounds. theorem: to prove that optimal algo of solving a n degree polynomial is o(n) proof: the best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight-line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 
can be written as, 
((..(anx+an-1)x+..+a2)x+a1)x+a0
now, algorithm will be as,
v=0
v=v+an
v=v*x
v=v+an-1
v=v*x
...
v=v+a1
v=v*x
v=v+a0 c polynomial(a, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + a[i])*x; return v; } clearly, the complexity of this code is o(n). this way of solving such equations is called horner?s method. here is where lower bound theory works and gives the optimum algorithm?s complexity as o(n). 2. upper bound theory: according to the upper bound theory, for an upper bound u(n) of an algorithm, we can always solve the problem at most u(n) time. time taken by a known algorithm to solve a problem with worse case input gives us the upper bound. my personal notes arrow_drop_up save like previous analysis of algorithms | little o and little omega notations next analysis of algorithms | set 4 (analysis of loops) recommended articles page : scala | upper bound 28, feb 19 scala | lower bound 12, mar 19 python program to count upper and lower case characters without using inbuilt functions 06, apr 18 shell script to convert a file content to lower case or upper case 18, apr 21 bound, unbound, and static methods in python 27, dec 19 generate binary strings of length n using branch and bound 20, nov 19 difference between backtracking and branch-n-bound technique 09, jun 20 0/1 knapsack using least cost branch and bound 28, jun 20 scala - view bound 27, jun 20 how to specify which form element a label is bound to ? 12, apr 21 java program to display upper triangular matrix 27, oct 20 convert given upper triangular matrix to 1d array 07, dec 20 java program to print upper star triangle pattern 15, mar 21 how to set the background image start from the upper left corner of the content using css? 28, apr 21 java program to print mirror upper star triangle pattern 21, mar 21 node.js mysql upper() function 16, feb 21 which built-in method returns the calling string value converted to upper case in javascript ? 30, dec 21 convert given lower triangular matrix to 1d array 09, feb 21 lower insertion point 20, dec 18 minimum number of operations to move all uppercase characters before all lower case characters 01, feb 19 java program to display lower triangular matrix 09, nov 20 java program to check whether a given matrix is lower triangular matrix or not 05, jan 21 node.js mysql lower() function 16, feb 21 efficient method to store a lower triangular matrix using column-major mapping 15, jun 21 article contributed by : piyush25pv @piyush25pv vote for difficulty current difficulty : easy easy normal medium hard expert improved by : soumya7 sriharimalla001 pawan1996 23603vaibhav2021 article tags : picked technical scripter 2018 algorithms analysis technical scripter practice tags : algorithms report issue writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here. load comments comments old comments what's new dsa live classes for working professionals view details geeks summer carnival 2022 view details data structures & algorithms- self paced course view details most popular in algorithms sde sheet - a complete guide for sde preparation top 50 array coding problems for interviews dsa sheet by love babbar difference between bfs and dfs a* search algorithm most visited in analysis time complexity and space complexity practice questions on time complexity analysis understanding time complexity with simple examples complexity of different operations in binary tree, binary search tree and avl tree time complexity of building a heap ? 5th floor, a-118, sector-136, noida, uttar pradesh - 201305 feedback@geeksforgeeks.org company about us careers in media contact us privacy policy copyright policy learn algorithms data structures sde cheat sheet machine learning cs subjects video tutorials news top news technology work & career business finance lifestyle languages python java cpp golang c# sql web development web tutorials django tutorial html css javascript bootstrap contribute write an article improve an article pick topics to write write interview experience internships video internship @geeksforgeeks , some rights reserved we use cookies to ensure you have the best browsing experience on our website. by using our site, you acknowledge that you have read and understood our cookie policy & privacy policy got it ! start your coding journey now! login register